/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vistas;

import Controllers.EnergiaRenovableController;
import Controllers.UsuarioController;
import Model.Rol;
import Model.Usuario;
import Repository.EnergiaRenovableRepository;
import Repository.UsuarioRepository;
import Services.EnergiaRenovableService;
import Services.UsuarioService;

import java.awt.Font;
import java.awt.Image;
import java.sql.SQLException;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 * @author MI PC
 */
public class PanelMenuPrincipal extends javax.swing.JFrame {

    private UsuarioController usuarioController;
    private UsuarioService usuarioService;
    private DefaultTableModel tableModel;
    long idUser = 0;

    /**
     * Creates new form PanelMenuPrincipal
     */
    public PanelMenuPrincipal() {
        initComponents();
        usuarioService = new UsuarioService();
        usuarioController = new UsuarioController();
        this.setVisible(true);
        setLocationRelativeTo(null);
        this.setResizable(false);
        inicializarTablaUsuario();
        icicializarComboboxRol();
        setFuentes();
        jButtonEliminar.setEnabled(false);
        inicializaSpinner();

    }

    private void icicializarComboboxRol() {
        UsuarioRepository usuarioRepository = new UsuarioRepository();

        UsuarioService usuarioService = new UsuarioService(usuarioRepository);

        UsuarioController usuarioController = new UsuarioController(usuarioService);

        List<Rol> listRoles = usuarioController.obtenerListaRol();

        for (Rol rol : listRoles) {
            jComboBoxRol.addItem(rol.getNombre());
        }

    }

    private void inicializaSpinner() {
        spinner.setVisible(false);
    }

    private void setFuentes() {
        jTableUsuarios.setFont(new java.awt.Font("Arial", java.awt.Font.PLAIN, 16));
        jTableUsuarios.getTableHeader().setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 16));

        jLabelNombre.setFont(new Font(jLabelNombre.getFont().getName(), Font.PLAIN, 16));
        jLabelContrasenia.setFont(new Font(jLabelContrasenia.getFont().getName(), Font.PLAIN, 16));
        jLabelEmail.setFont(new Font(jLabelEmail.getFont().getName(), Font.PLAIN, 16));
        jLabelRol.setFont(new Font(jLabelRol.getFont().getName(), Font.PLAIN, 16));

        jTextNombreUsuario.setFont(new Font(jTextNombreUsuario.getFont().getName(), Font.PLAIN, 16));
        jTextContrasenia.setFont(new Font(jTextContrasenia.getFont().getName(), Font.PLAIN, 16));
        jTextEmail.setFont(new Font(jTextEmail.getFont().getName(), Font.PLAIN, 16));
        jComboBoxRol.setFont(new Font(jComboBoxRol.getFont().getName(), Font.PLAIN, 16));

        jTabbedEnergias.setFont(new Font(jTabbedEnergias.getFont().getName(), Font.PLAIN, 16));
        jTableUsuarios.setFont(new Font(jTableUsuarios.getFont().getName(), Font.PLAIN, 16));

        jButtonGuardar.setFont(new Font(jButtonGuardar.getFont().getName(), Font.PLAIN, 16));
        jButtonBuscar.setFont(new Font(jButtonBuscar.getFont().getName(), Font.PLAIN, 16));
        jButtonEliminar.setFont(new Font(jButtonEliminar.getFont().getName(), Font.PLAIN, 16));
        jButtonActualizar.setFont(new Font(jButtonActualizar.getFont().getName(), Font.PLAIN, 16));
    }

    private void inicializarTablaUsuario() {
        tableModel = (DefaultTableModel) jTableUsuarios.getModel();

        jTableUsuarios.getColumnModel().getColumn(0).setPreferredWidth(20);
        jTableUsuarios.getColumnModel().getColumn(1).setPreferredWidth(150);
        jTableUsuarios.getColumnModel().getColumn(2).setPreferredWidth(200);
        jTableUsuarios.getColumnModel().getColumn(3).setPreferredWidth(100);

        EnergiaRenovableRepository energiaRepository = new EnergiaRenovableRepository();

        EnergiaRenovableService energiaService = new EnergiaRenovableService(energiaRepository);

        EnergiaRenovableController energiaController = new EnergiaRenovableController(energiaService);

        cargarUsuariosEnTabla();

        jTableUsuarios.getSelectionModel().addListSelectionListener(event -> {
            if (!event.getValueIsAdjusting() && jTableUsuarios.getSelectedRow() != -1) {
                cargarDatosUsuarioSeleccionado();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedEnergias = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        JBConsultaUno = new javax.swing.JButton();
        JBConsultaTres = new javax.swing.JButton();
        JBConsultaCinco = new javax.swing.JButton();
        JBConsultaDos = new javax.swing.JButton();
        JBConsultaCuatro = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButtonBuscar = new javax.swing.JButton();
        jButtonActualizar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jLabelNombre = new javax.swing.JLabel();
        jTextNombreUsuario = new javax.swing.JTextField();
        jLabelEmail = new javax.swing.JLabel();
        jTextEmail = new javax.swing.JTextField();
        jLabelContrasenia = new javax.swing.JLabel();
        jTextContrasenia = new javax.swing.JTextField();
        jLabelRol = new javax.swing.JLabel();
        JtablaUsuarios = new javax.swing.JScrollPane();
        jTableUsuarios = new javax.swing.JTable();
        jButtonGuardar = new javax.swing.JButton();
        jComboBoxRol = new javax.swing.JComboBox<>();
        spinner = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);

        JBConsultaUno.setText("Consulta Uno");
        JBConsultaUno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBConsultaUnoActionPerformed(evt);
            }
        });

        JBConsultaTres.setText("Consulta Tres");
        JBConsultaTres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBConsultaTresActionPerformed(evt);
            }
        });

        JBConsultaCinco.setText("Consulta Cinco");
        JBConsultaCinco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBConsultaCincoActionPerformed(evt);
            }
        });

        JBConsultaDos.setText("Consulta Dos");
        JBConsultaDos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBConsultaDosActionPerformed(evt);
            }
        });

        JBConsultaCuatro.setText("Consulta Cuatro");
        JBConsultaCuatro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBConsultaCuatroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(JBConsultaUno, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108)
                        .addComponent(JBConsultaDos, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(JBConsultaTres, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(JBConsultaCuatro, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(JBConsultaCinco, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBConsultaUno, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBConsultaTres, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBConsultaDos, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBConsultaCuatro, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBConsultaCinco, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(374, Short.MAX_VALUE))
        );

        jTabbedEnergias.addTab("Gestion de Energias renovables", jPanel1);

        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jButtonActualizar.setText("Actualizar");
        jButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jLabelNombre.setText("Nombre");

        jTextNombreUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jLabelEmail.setText("E-mail");

        jTextEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextEmailActionPerformed(evt);
            }
        });

        jLabelContrasenia.setText("Contraseña");

        jLabelRol.setText("Rol");

        JtablaUsuarios.setToolTipText("");

        jTableUsuarios.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jTableUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Email", "Rol"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableUsuarios.setAlignmentX(0.8F);
        jTableUsuarios.setAlignmentY(0.8F);
        jTableUsuarios.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTableUsuarios.setName(""); // NOI18N
        jTableUsuarios.setRowHeight(25);
        JtablaUsuarios.setViewportView(jTableUsuarios);
        if (jTableUsuarios.getColumnModel().getColumnCount() > 0) {
            jTableUsuarios.getColumnModel().getColumn(0).setResizable(false);
            jTableUsuarios.getColumnModel().getColumn(1).setResizable(false);
            jTableUsuarios.getColumnModel().getColumn(2).setResizable(false);
            jTableUsuarios.getColumnModel().getColumn(3).setResizable(false);
        }
        jTableUsuarios.getAccessibleContext().setAccessibleName("");

        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(JtablaUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextNombreUsuario)
                    .addComponent(jLabelEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextEmail)
                    .addComponent(jLabelContrasenia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextContrasenia)
                    .addComponent(jLabelRol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxRol, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(jButtonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabelNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addComponent(jLabelContrasenia)
                        .addGap(7, 7, 7)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabelRol, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRol, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(JtablaUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        jTabbedEnergias.addTab("Gestion de usuarios", jPanel2);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedEnergias)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedEnergias))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        buscarByEmail();

    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarActionPerformed
        actualizarUsuario();
    }//GEN-LAST:event_jButtonActualizarActionPerformed

    private void jTextEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextEmailActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        agregarUsuario();
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        eliminarUsuarioById();

    }//GEN-LAST:event_jButtonEliminarActionPerformed

    //Ir a la consulta Uno
    private void JBConsultaUnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBConsultaUnoActionPerformed

        //ConsultaUno Consulta1 = new ConsultaUno();
        this.setVisible(false);
        ConsultaUno mi_Consulta1 = new ConsultaUno();
        mi_Consulta1.setVisible(true);

    }//GEN-LAST:event_JBConsultaUnoActionPerformed

    //Ir a la consulta Tres
    private void JBConsultaTresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBConsultaTresActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        ConsultaTres mi_Consulta3 = new ConsultaTres();
        mi_Consulta3.setVisible(true);
        
    }//GEN-LAST:event_JBConsultaTresActionPerformed

    //Ir a la consulta cinco
    private void JBConsultaCincoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBConsultaCincoActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        ConsultaCinco mi_Consulta5 = new ConsultaCinco();
        mi_Consulta5.setVisible(true);
        
    }//GEN-LAST:event_JBConsultaCincoActionPerformed

    //Ir a la consulta Dos
    private void JBConsultaDosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBConsultaDosActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        ConsultaaDos mi_Consulta2 = new ConsultaaDos();
        mi_Consulta2.setVisible(true);
    }//GEN-LAST:event_JBConsultaDosActionPerformed

    //Ir a la consulta Cuatro
    private void JBConsultaCuatroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBConsultaCuatroActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        ConsultaCuatro mi_Consulta4 = new ConsultaCuatro();
        mi_Consulta4.setVisible(true);
    }//GEN-LAST:event_JBConsultaCuatroActionPerformed
    private void eliminarUsuarioById() {
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este usuario?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.NO_OPTION) {
            return;
        }
        spinner.setVisible(true);

        SwingWorker<Usuario, Void> worker = new SwingWorker<>() {
            private Usuario usuarioEliminado;

            @Override
            protected Usuario doInBackground() throws Exception {
                UsuarioRepository usuarioRepository = new UsuarioRepository();
                UsuarioService usuarioService = new UsuarioService(usuarioRepository);
                UsuarioController usuarioController = new UsuarioController(usuarioService);
                return usuarioController.eliminarUsuarioById(idUser);
            }

            @Override
            protected void done() {
                spinner.setVisible(false);

                try {
                    usuarioEliminado = get();

                    if (usuarioEliminado != null) {
                        JOptionPane.showMessageDialog(null, "Usuario eliminado correctamente:\nEmail: " + usuarioEliminado.getEmail(), "Eliminación exitosa", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "El usuario no existe o el ID es incorrecto.", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                    cargarUsuariosEnTabla();
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Ocurrió un error durante la eliminación.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        };
        worker.execute();
    }

    private void buscarByEmail() {
        spinner.setVisible(true);
        String email = jTextEmail.getText().trim();
        if (email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debes ingresar el Email que deseas buscar", "Input Error", JOptionPane.ERROR_MESSAGE);
            spinner.setVisible(false);
            return;
        }

        SwingWorker<Usuario, Void> worker = new SwingWorker<>() {
            @Override
            protected Usuario doInBackground() throws Exception {
                UsuarioRepository usuarioRepository = new UsuarioRepository();
                UsuarioService usuarioService = new UsuarioService(usuarioRepository);
                UsuarioController usuarioController = new UsuarioController(usuarioService);
                return usuarioController.obtenerUsuarioByEmail(email);
            }

            @Override
            protected void done() {
                try {
                    Usuario usuario = get();

                    if (usuario == null) {
                        JOptionPane.showMessageDialog(null, "Usuario no encontrado: Email no existe o está mal escrito.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        // Rellenar los campos con los datos del usuario encontrado
                        jTextNombreUsuario.setText(usuario.getNombre());
                        jTextEmail.setText(usuario.getEmail());
                        jTextContrasenia.setText(usuario.getContrasenia());
                        jComboBoxRol.setSelectedItem(usuario.getRol().getNombre());
                        jButtonEliminar.setEnabled(true);
                        idUser = usuario.getId();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    spinner.setVisible(false);
                }
            }
        };

        worker.execute();
    }

    private void cargarUsuariosEnTabla() {
        UsuarioRepository usuarioRepository = new UsuarioRepository();

        UsuarioService usuarioService = new UsuarioService(usuarioRepository);

        UsuarioController usuarioController = new UsuarioController(usuarioService);

        List<Usuario> listUsuarios = usuarioController.obtenerUsuarios();

        tableModel.setRowCount(0);

        for (Usuario usuario : listUsuarios) {
            tableModel.addRow(new Object[]{
                usuario.getId(),
                usuario.getNombre(),
                usuario.getEmail(),
                usuario.getRol().getNombre()
            });
        }
    }

    private void cargarDatosUsuarioSeleccionado() {
        int filaSeleccionada = jTableUsuarios.getSelectedRow();
        if (filaSeleccionada != -1) {
            idUser = (long) jTableUsuarios.getValueAt(filaSeleccionada, 0);
            String nombre = jTableUsuarios.getValueAt(filaSeleccionada, 1).toString();
            String email = jTableUsuarios.getValueAt(filaSeleccionada, 2).toString();
            String rol = jTableUsuarios.getValueAt(filaSeleccionada, 3).toString();
            jComboBoxRol.setSelectedItem(rol);
            jTextNombreUsuario.setText(nombre);
            jTextEmail.setText(email);
        }
        jButtonEliminar.setEnabled(true);
    }

    private void agregarUsuario() {

        spinner.setVisible(true);

        SwingWorker<Void, Void> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                UsuarioRepository usuarioRepository = new UsuarioRepository();
                UsuarioService usuarioService = new UsuarioService(usuarioRepository);
                UsuarioController usuarioController = new UsuarioController(usuarioService);

                String nombre = jTextNombreUsuario.getText().trim();
                String email = jTextEmail.getText().trim();
                String contrasenia = jTextContrasenia.getText().trim();
                String nombreRol = (String) jComboBoxRol.getSelectedItem();

                if (nombre.isEmpty() || email.isEmpty() || contrasenia.isEmpty() || nombreRol.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Complete todos los campos por favor", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return null;
                }

                Rol rol = new Rol();
                rol.setNombre(nombreRol);

                Usuario usuario = new Usuario(0, nombre, email, contrasenia, rol);

                usuarioController.agregarUsuario(usuario);
                return null;
            }

            @Override
            protected void done() {
                try {
                    cargarUsuariosEnTabla();
                    JOptionPane.showMessageDialog(null, "Registro agregado");
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    // Ocultar el spinner
                    spinner.setVisible(false);
                }
            }
        };

        worker.execute();
    }

    private void actualizarUsuario() {
        // Mostrar el spinner antes de ejecutar la tarea
        spinner.setVisible(true);

        SwingWorker<Void, Void> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                UsuarioRepository usuarioRepository = new UsuarioRepository();
                UsuarioService usuarioService = new UsuarioService(usuarioRepository);
                UsuarioController usuarioController = new UsuarioController(usuarioService);

                // Obtener datos de los campos
                String nombre = jTextNombreUsuario.getText().trim();
                String email = jTextEmail.getText().trim();
                String contrasenia = jTextContrasenia.getText().trim();
                String nombreRol = (String) jComboBoxRol.getSelectedItem();

                // Validación de campos
                if (nombre.isEmpty() || email.isEmpty() || contrasenia.isEmpty() || nombreRol.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Complete todos los campos por favor", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return null;
                }

                // Crear el objeto Rol y Usuario con los datos obtenidos
                Rol rol = new Rol();
                rol.setNombre(nombreRol);
                rol.setId(1);  // Aquí debes establecer el ID adecuado para el rol

                Usuario usuario = new Usuario();
                usuario.setId(idUser);
                usuario.setNombre(nombre);
                usuario.setEmail(email);
                usuario.setContrasenia(contrasenia);
                usuario.setRol(rol);

                // Llamada al controlador para actualizar el usuario
                usuarioController.actualizarUsuario(usuario);
                return null;
            }

            @Override
            protected void done() {
                try {
                    // Actualizar la tabla y mostrar mensaje de éxito si no hubo excepciones
                    cargarUsuariosEnTabla();
                    JOptionPane.showMessageDialog(null, "Usuario actualizado correctamente.");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error al actualizar usuario: " + e.getMessage());
                } finally {
                    // Ocultar el spinner
                    spinner.setVisible(false);
                }
            }
        };

        // Ejecutar el worker en segundo plano
        worker.execute();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelMenuPrincipal().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBConsultaCinco;
    private javax.swing.JButton JBConsultaCuatro;
    private javax.swing.JButton JBConsultaDos;
    private javax.swing.JButton JBConsultaTres;
    private javax.swing.JButton JBConsultaUno;
    private javax.swing.JScrollPane JtablaUsuarios;
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JComboBox<String> jComboBoxRol;
    private javax.swing.JLabel jLabelContrasenia;
    private javax.swing.JLabel jLabelEmail;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelRol;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedEnergias;
    private javax.swing.JTable jTableUsuarios;
    private javax.swing.JTextField jTextContrasenia;
    private javax.swing.JTextField jTextEmail;
    private javax.swing.JTextField jTextNombreUsuario;
    private javax.swing.JLabel spinner;
    // End of variables declaration//GEN-END:variables
}
